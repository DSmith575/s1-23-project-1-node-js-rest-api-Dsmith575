generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Character {
  id            Int             @id @default(autoincrement())
  name          String
  rarity        Rarity[]
  element       Element[]
  // weaponType    WeaponType?
  affinity      String
  personality   Personality[]
  description   String
  attributes    Attribute?
  affinityBonus Affinity_bonus?
}

model Element {
  id           Int       @id @default(autoincrement())
  element     String
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
}

model Attribute {
  id          Int       @id @default(autoincrement())
  hp          Int
  mp          Int
  pwr         Int
  spd         Int
  end         Int
  spr         Int
  lck         Int
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int       @unique
}

model Rarity {
  id          Int       @id @default(autoincrement())
  rarity      Int
  className   String
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
}

model Affinity_bonus {
  id          Int       @id @default(autoincrement())
  bonus5      String
  bonus15     String
  bonus30     String
  bonus50     String
  bonus75     String
  bonus80     String
  bonus105    String
  bonus120    String
  bonus140    String
  bonus175    String
  bonus200    String
  bonus215    String
  bonus225    String
  bonus255    String
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int       @unique
}

model Personality {
  id              Int       @id @default(autoincrement())
  personality String
  character       Character @relation(fields: [characterId], references: [id])
  characterId     Int
}

// model WeaponType {
//   id          Int       @id @default(autoincrement())
//   weapon      String
//   skillType   String
//   character   Character @relation(references: [id], fields: [characterId])
//   characterId Int
// }

// model AccessoryType {
//   id          Int       @id @default(autoincrement())
//   accessory   String
//   character   Character @relation(fields: [characterId], references: [id])
//   characterId Int @unique
// }

// const validWeaponValues = ["Staff", "Sword", "Katana", "Axe", "Spear", "Bow", "Fist", "Hammer"];
// model Weapons {
// id
// name
// skillType
// weaponType WeaponType @relation
// weaponId
// 
//}

// const validAccessoryType = ["Bangle", "Necklace", "Ring"]

// model Personalities {
//   id          Int       @id @default(autoincrement())
//   personality String
//   character   Character @relation(fields: [characterId], references: [id])
//   characterId Int
// }



// Validate weapon value before creating a new Character
// if (!validWeaponValues.includes(newCharacter.weapon)) {
//   throw new Error(`Invalid weapon value: ${newCharacter.weapon}`);
// }

// // Update weapon value for an existing Character
// if (!validWeaponValues.includes(updatedCharacter.weapon)) {
//   throw new Error(`Invalid weapon value: ${updatedCharacter.weapon}`);
// }

// Check if rarity already exists in the model

// const existingRarity = await prisma.rarity.findUnique({
//   where: { rarity: rarity, className: className, characterId: characterId },
// });

// if (existingRarity) {
//   return res.status(409).json({
//     msg: `Rarity with the value ${rarity} already exists for the character with id ${characterId}`,
//   });
// }
